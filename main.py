import sys
import os
import json
import configparser
import logging
import base64
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QPushButton, QLineEdit, QLabel, QFileDialog, QMessageBox, 
                             QProgressBar, QTextEdit, QTabWidget, QCheckBox, QListWidget)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from github import Github, GithubException

# 确保必要的文件和目录存在
if not os.path.exists('GitHub'):
    os.makedirs('GitHub')

LOG_FILE = 'GitHub/github_uploader.log'
CONFIG_FILE = 'GitHub/config.ini'
TOKEN_FILE = 'GitHub/token.json'

if not os.path.exists(LOG_FILE):
    open(LOG_FILE, 'w').close()

logging.basicConfig(filename=LOG_FILE, level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

class UploadThread(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)
    log = pyqtSignal(str)

    def __init__(self, token, repo_name, path):
        super().__init__()
        self.token = token
        self.repo_name = repo_name
        self.path = path

    def run(self):
        try:
            g = Github(self.token)
            repo = g.get_user().get_repo(self.repo_name)
            
            if os.path.isfile(self.path):
                self.upload_file(repo, self.path)
            else:
                self.upload_folder(repo, self.path)

            self.finished.emit(True, f"成功上传: {self.path}")
        except GithubException as e:
            self.finished.emit(False, f"GitHub错误: {e.data.get('message', str(e))}")
        except Exception as e:
            self.finished.emit(False, str(e))

    def upload_file(self, repo, file_path):
        try:
            with open(file_path, 'rb') as file:
                content = file.read()
            file_name = os.path.basename(file_path)
            
            try:
                contents = repo.get_contents(file_name)
                repo.update_file(contents.path, f"更新 {file_name}", base64.b64encode(content).decode(), contents.sha)
                self.log.emit(f"已更新文件: {file_name}")
            except GithubException as e:
                if e.status == 404:  # 文件不存在，创建新文件
                    repo.create_file(file_name, f"上传 {file_name}", base64.b64encode(content).decode())
                    self.log.emit(f"已上传新文件: {file_name}")
                else:
                    raise
            
            self.progress.emit(100)
        except Exception as e:
            self.log.emit(f"上传文件 {file_name} 时出错: {str(e)}")
            raise

    def upload_folder(self, repo, folder_path):
        total_files = sum([len(files) for r, d, files in os.walk(folder_path)])
        uploaded_files = 0

        for root, dirs, files in os.walk(folder_path):
            for file in files:
                try:
                    file_path = os.path.join(root, file)
                    with open(file_path, 'rb') as f:
                        content = f.read()
                    
                    relative_path = os.path.relpath(file_path, folder_path)
                    try:
                        contents = repo.get_contents(relative_path)
                        repo.update_file(contents.path, f"更新 {relative_path}", base64.b64encode(content).decode(), contents.sha)
                        self.log.emit(f"已更新文件: {relative_path}")
                    except GithubException as e:
                        if e.status == 404:  # 文件不存在，创建新文件
                            repo.create_file(relative_path, f"上传 {relative_path}", base64.b64encode(content).decode())
                            self.log.emit(f"已上传新文件: {relative_path}")
                        else:
                            raise
                    
                    uploaded_files += 1
                    self.progress.emit(int(uploaded_files / total_files * 100))
                except Exception as e:
                    self.log.emit(f"上传文件 {relative_path} 时出错: {str(e)}")

class UpdateReposThread(QThread):
    finished = pyqtSignal(list)
    error = pyqtSignal(str)

    def __init__(self, token):
        super().__init__()
        self.token = token

    def run(self):
        try:
            g = Github(self.token)
            user = g.get_user()
            repos = [repo.name for repo in user.get_repos()]
            self.finished.emit(repos)
        except Exception as e:
            self.error.emit(str(e))

class GitHubUploader(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.load_config()
        
    def initUI(self):
        self.setWindowTitle('GitHub 文件上传器')
        self.setGeometry(100, 100, 800, 600)  # 增加窗口大小
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # 创建标签页
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)
        
        # 主页面
        main_tab = QWidget()
        self.tab_widget.addTab(main_tab, "上传")
        
        layout = QVBoxLayout()
        main_tab.setLayout(layout)
        
        # 仓库选择
        repo_layout = QVBoxLayout()
        repo_label = QLabel("仓库列表:")
        self.repo_list = QListWidget()
        update_repos_button = QPushButton("更新仓库列表")
        update_repos_button.clicked.connect(self.update_repos)
        repo_layout.addWidget(repo_label)
        repo_layout.addWidget(self.repo_list)
        repo_layout.addWidget(update_repos_button)
        layout.addLayout(repo_layout)
        
        # 文件/文件夹选择
        path_layout = QHBoxLayout()
        self.path_label = QLabel("未选择文件/文件夹")
        file_button = QPushButton("选择文件")
        file_button.clicked.connect(self.select_file)
        folder_button = QPushButton("选择文件夹")
        folder_button.clicked.connect(self.select_folder)
        path_layout.addWidget(self.path_label)
        path_layout.addWidget(file_button)
        path_layout.addWidget(folder_button)
        layout.addLayout(path_layout)
        
        # 上传按钮
        upload_button = QPushButton("上传")
        upload_button.clicked.connect(self.upload)
        layout.addWidget(upload_button)
        
        # 进度条
        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)
        
        # 状态显示
        self.status_label = QLabel("")
        layout.addWidget(self.status_label)
        
        # 设置页面
        settings_tab = QWidget()
        self.tab_widget.addTab(settings_tab, "设置")
        
        settings_layout = QVBoxLayout()
        settings_tab.setLayout(settings_layout)
        
        # Token输入
        token_layout = QHBoxLayout()
        token_label = QLabel("GitHub Token:")
        self.token_input = QLineEdit()
        self.token_input.setEchoMode(QLineEdit.Password)
        token_layout.addWidget(token_label)
        token_layout.addWidget(self.token_input)
        settings_layout.addLayout(token_layout)
        
        self.auto_save_checkbox = QCheckBox('自动保存配置')
        settings_layout.addWidget(self.auto_save_checkbox)
        
        # 保存按钮
        save_button = QPushButton("保存设置")
        save_button.clicked.connect(self.save_config)
        settings_layout.addWidget(save_button)
        
        # 日志页面
        log_tab = QWidget()
        self.tab_widget.addTab(log_tab, "日志")
        
        log_layout = QVBoxLayout()
        log_tab.setLayout(log_layout)
        
        self.log_display = QTextEdit()
        self.log_display.setReadOnly(True)
        log_layout.addWidget(self.log_display)

    def load_config(self):
        if not os.path.exists(CONFIG_FILE):
            open(CONFIG_FILE, 'w').close()
        
        config = configparser.ConfigParser()
        config.read(CONFIG_FILE)
        if 'GitHub' in config:
            self.token_input.setText(config['GitHub'].get('token', ''))
            last_repo = config['GitHub'].get('repo', '')
            if last_repo:
                self.repo_list.addItem(last_repo)
        
        if os.path.exists(TOKEN_FILE):
            try:
                with open(TOKEN_FILE, 'r') as f:
                    token_data = json.load(f)
                    self.token_input.setText(token_data.get('token', ''))
            except json.JSONDecodeError:
                logging.error("token.json 文件格式错误")
        
    def save_config(self):
        config = configparser.ConfigParser()
        config['GitHub'] = {
            'token': self.token_input.text(),
            'repo': self.repo_list.currentItem().text() if self.repo_list.currentItem() else ''
        }
        with open(CONFIG_FILE, 'w') as f:
            config.write(f)
        
        with open(TOKEN_FILE, 'w') as f:
            json.dump({'token': self.token_input.text()}, f)
        
        logging.info("配置已保存")
        QMessageBox.information(self, "保存成功", "配置已成功保存")
        
    def select_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "选择文件")
        if file_name:
            self.path_label.setText(file_name)
            
    def select_folder(self):
        folder_name = QFileDialog.getExistingDirectory(self, "选择文件夹")
        if folder_name:
            self.path_label.setText(folder_name)
            
    def update_repos(self):
        token = self.token_input.text()
        if not token:
            QMessageBox.warning(self, "错误", "请先在设置页面输入GitHub Token")
            return
        
        self.status_label.setText("正在更新仓库列表...")
        self.update_thread = UpdateReposThread(token)
        self.update_thread.finished.connect(self.update_repos_finished)
        self.update_thread.error.connect(self.update_repos_error)
        self.update_thread.start()

    def update_repos_finished(self, repos):
        self.repo_list.clear()
        self.repo_list.addItems(repos)
        self.status_label.setText("仓库列表更新完成")

    def update_repos_error(self, error):
        self.status_label.setText(f"更新仓库列表失败: {error}")
        QMessageBox.critical(self, "错误", f"更新仓库列表失败: {error}")
            
    def upload(self):
        token = self.token_input.text()
        if not self.repo_list.currentItem():
            self.status_label.setText("请选择一个仓库")
            return
        repo_name = self.repo_list.currentItem().text()
        path = self.path_label.text()
        
        if not token or not repo_name or path == "未选择文件/文件夹":
            self.status_label.setText("请填写所有字段并选择文件或文件夹")
            return
        
        self.upload_thread = UploadThread(token, repo_name, path)
        self.upload_thread.progress.connect(self.update_progress)
        self.upload_thread.finished.connect(self.upload_finished)
        self.upload_thread.log.connect(self.update_log)
        self.upload_thread.start()
        
        self.status_label.setText("正在上传...")
        if self.auto_save_checkbox.isChecked():
            self.save_config()
        
    def update_progress(self, value):
        self.progress_bar.setValue(value)
        
    def update_log(self, message):
        self.log_display.append(message)
        logging.info(message)

    def upload_finished(self, success, message):
        if success:
            self.status_label.setText(message)
            logging.info(message)
        else:
            error_msg = f"错误: {message}"
            self.status_label.setText(error_msg)
            logging.error(error_msg)
            QMessageBox.critical(self, "上传失败", error_msg)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = GitHubUploader()
    ex.show()
    sys.exit(app.exec_())